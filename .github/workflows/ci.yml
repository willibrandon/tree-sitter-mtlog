name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: [18, 20, 22]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          
      - name: Install dependencies
        run: npm install
        
      - name: Generate parser
        run: npm run generate
        
      - name: Run tests
        run: npm test
        
      - name: Build native module
        run: npm run build
        
      - name: Run benchmarks
        run: npm run benchmark
          
  validate-queries:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      - name: Install dependencies
        run: npm install
        
      - name: Generate parser
        run: npm run generate
        
      - name: Validate highlight queries
        run: |
          echo "User {UserId} logged in" > test.mtlog
          npx tree-sitter highlight test.mtlog
          
      - name: Validate parsing
        run: |
          echo "Testing various templates..." 
          echo "User {UserId} logged in" > test.mtlog && npx tree-sitter parse test.mtlog
          echo "Price: {Amount:F2}" > test.mtlog && npx tree-sitter parse test.mtlog
          echo "User {{.Name}}" > test.mtlog && npx tree-sitter parse test.mtlog
          echo "\${Timestamp} [\${Level}]" > test.mtlog && npx tree-sitter parse test.mtlog
          
  lint:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Check C code formatting
        run: |
          # Check that scanner.c follows consistent style
          if grep -q "	" src/scanner.c; then
            echo "✅ scanner.c uses consistent indentation"
          else
            echo "⚠️ scanner.c may have inconsistent indentation"
          fi
          
      - name: Validate package.json
        run: |
          node -e "JSON.parse(require('fs').readFileSync('package.json'))"
          echo "✅ package.json is valid JSON"
          
      - name: Validate tree-sitter.json
        run: |
          node -e "JSON.parse(require('fs').readFileSync('tree-sitter.json'))"
          echo "✅ tree-sitter.json is valid JSON"
          
